---
title: "Exercise 4: Compute Degree Days for the Entire Season"
format: 
  html:
    theme: cosmo
    df-print: paged
    code-link: true
    link-external-icon: true
    link-external-newwindow: true
    number-sections: true
editor: source
---


# Import the individual weather data files

Begin by importing the weather data tables we created in exercises 2 and 3:

```{r}
data_dir <- here::here("exercises/data")

dir.exists(data_dir)

## For the recent past data for CIMIS Station 077, we will use a saved copy of the station
## data download using the CIMIS API (see import-data-cimis-api.qmd), 
## rather than the copy we imported thru Syntopic,
## We do this because there is ~6 week gap in the Synoptic data during Jan & Feb 2024 
## when CIMIS data were not ingested into Synoptic.

stn_rctpast_dlytas_tbl <- readRDS(file.path(data_dir, "stn_rctpast_cimis_dlytas_tbl.Rds"))

stn_shrtfrcst_dlytas_tbl <- readRDS(file.path(data_dir, "stn_shrtfrcst_dlytas_tbl.Rds"))

stn_ssnfcast_dlytas_tbl <- readRDS(file.path(data_dir, "stn_ssnfcast_dlytas_tbl.Rds"))

stn_histavg_dlytas_tbl <- readRDS(file.path(data_dir, "stn_histavg_dlytas_tbl.Rds"))

```

\

Inspect to make sure they have the same structure:

```{r results = 'hold'}
stn_rctpast_dlytas_tbl |> head()
stn_rctpast_dlytas_tbl$date |> range()
```

\

```{r results = 'hold'}
stn_shrtfrcst_dlytas_tbl |> head()
stn_shrtfrcst_dlytas_tbl$date |> range()
```

\

```{r results = 'hold'}
stn_ssnfcast_dlytas_tbl |> head()
stn_ssnfcast_dlytas_tbl$date |> range()
```

\

```{r results = 'hold'}
stn_histavg_dlytas_tbl |> head()
stn_histavg_dlytas_tbl$date |> range()
```


\

## Load packages

```{r results = 'hold', message=FALSE}
library(dplyr)

# Set preferences for functions with common names 
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("count", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("arrange", "dplyr")
```

## Combine the tables and plot

Note: after combining the tables we convert the period column to a factor with manually specified levels. This is how we control the order of the three periods in the legend in ggplot.

```{r}
stn_all_dlytas_tbl <- stn_rctpast_dlytas_tbl |> 
  bind_rows(stn_shrtfrcst_dlytas_tbl) |> 
  bind_rows(stn_ssnfcast_dlytas_tbl) |> 
  mutate(period = factor(period, levels = c("rp", "stf", "seasn")))
```

\

```{r}
library(ggplot2)

ggplot(stn_all_dlytas_tbl, mapping = aes(x = date, y = tasmax, col = period)) +
  geom_line() +
  geom_line(mapping = aes(y = tasmin)) +
  ylab("air temperature") +
  xlab(NULL) +
  labs(title = "Minimum and Maximum Daily Temperature",
       subtitle = "CIMIS Station #077, Oakville. 2024",
       caption = "Sources:\nRecent past: CIMIS API\nShort-term forecast: Open-Meteo Weather Forecast\nSeasonal forecast: Open-Meteo Seasonal Forecast") +
  theme(plot.caption = element_text(hjust = 0)) 
```

\

Do the same using the __historic daily average__ as the proxy for the seasonal forecast:

```{r}
stn_all_dlytas_histavg_tbl <- stn_rctpast_dlytas_tbl |> 
  bind_rows(stn_shrtfrcst_dlytas_tbl) |> 
  bind_rows(stn_histavg_dlytas_tbl) |> 
  mutate(period = factor(period, levels = c("rp", "stf", "histavg")))

ggplot(stn_all_dlytas_histavg_tbl, mapping = aes(x = date, y = tasmax, col = period)) +
  geom_line() +
  geom_line(mapping = aes(y = tasmin)) +
  ylab("air temperature") +
  xlab(NULL) +
  labs(title = "Minimum and Maximum Daily Temperature",
       subtitle = "CIMIS Station #077, Oakville. 2024",
       caption = "Sources:\nRecent past: CIMIS API\nShort-term forecast: Open-Meteo Weather Forecast\nSeasonal forecast: Long-term daily average, gridMet 1990-2020") +
  theme(plot.caption = element_text(hjust = 0)) 


```



# Compute Degree Days

What difference does the seasonal forecast vs historic daily averages make in the accumulation of degree days?







