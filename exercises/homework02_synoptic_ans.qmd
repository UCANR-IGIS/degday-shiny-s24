---
title: "Homework 2: Download and Plot Weather Station Data using the Synoptic API - SOLUTIONS"
format: 
  html:
    theme: cosmo
    df-print: paged
    code-link: true
    number-sections: true
editor: visual
---

# Overview

In this exercise, you will import and plot a) temperature and b) precipitation data for a weather station of your choice using the Synoptic API. The outputs will look something like:

![](./images/hollister-tasmin-tasmax-plot.png)

\

![](./images/hollister-daily-precip-col-chart.png)

\

![](./images/hollister-acc-precip.png)

\

# Preparation

## 1. Create a Synoptic Account

Create an account on [Synoptic Data](https://customer.synopticdata.com/) ([instructions](welcome.html#synoptic-setup)). Either an open access or a commercial trial account will work. Create a private key and public token. You will use your public token when calling the API.

## 2. Select a Weather Station

Open the Synoptic Data Viewer: <https://viewer.synopticdata.com/>

Zoom and pan to find the station of your choice. Try to find a weather station that records both temperature and precipitation (this includes stations in the CIMIS network, RAWS, Global METAR, and others).

Click on a station to view the station ID and data availability.

![](./images/synoptic-station-id_hollister_650x260.png)

## 3. Read the docs

Read the documentation for the Synoptic [time series](https://docs.synopticdata.com/services/time-series) end point. Take note of:

-   the base URL
-   parameters (required and optional)

**Tip:** You can test your request with the Synoptic Query Builder: <https://demos.synopticdata.com/query-builder/>

\

# Part 1. Download hourly temperature data, compute daily min and max, and plot

## Create the API Request

Create an API request object for the Synoptic Time Series End Point, getting hourly temperature and precipitation data for the station of your choice from Oct 1, 2023 thru yesterday (i.e., the current water year).

```{r}
library(httr2)
library(lubridate) |> suppressPackageStartupMessages()

synoptic_ts_baseurl <- "https://api.synopticdata.com/v2/stations/timeseries"

my_token <- readLines("~/My Tokens/my_synoptic_token_hw02.txt", n = 1)

station_id_chr <- "HSEC1"

## Create the start time (midnight Oct 1, 2023 > converted to UTC > converted to a character 
## string formatted as YYYYmmddHHMM)

start_utc_chr <- make_datetime(year = 2023, month = 10, day = 1, hour = 0, min = 0, sec = 0, 
                               tz = "America/Los_Angeles") |> 
  with_tz("UTC") |> 
  format("%Y%m%d%H%M")

start_utc_chr

## Create the end time (11:59pm yesterday >> converted to UTC >> converted to a character 
## string formatted as YYYYmmddHHMM)

end_utc_chr <- (as_datetime(today() - days(1), tz = "America/Los_Angeles") + 
                  hours(23) + minutes(59)) |>  
  with_tz("UTC") |> 
  format("%Y%m%d%H%M")

end_utc_chr

weather_vars <- "air_temp"

## Create the request object:
holister_tas_req <- request(synoptic_ts_baseurl) |> 
  req_headers("Accept" = "application/json") |> 
  req_url_query(token = my_token,
                start = start_utc_chr,
                end = end_utc_chr,
                stid = station_id_chr,
                vars = weather_vars,
                units = "english",
                obtimezone = "local",
                .multi = "comma")

holister_tas_req
```

\

## Perform the request

```{r perform_req, cache = TRUE}
## Do a dry run
# holister_tas_req |> req_dry_run()  

## Perform the request
holister_tas_resp <- holister_tas_req |> req_perform()
```

\

View the response:

```{r}
holister_tas_resp
```

\

## Convert the response into a tibble

Extract the body of the response as a list object:

```{r}
holister_tas_lst <- holister_tas_resp |> resp_body_json()

## Inspect the structure
## holister_tas_lst |> View()
```

\

Pull out the dates:

```{r}
holister_tas_dt <- holister_tas_lst$STATION[[1]]$OBSERVATIONS$date_time |> 
  unlist() |> 
  ymd_hms(tz = "America/Los_Angeles")

length(holister_tas_dt)
head(holister_tas_dt)
tail(holister_tas_dt)
```

\

Pull out the temperature values:

**TIP**: You can convert NULL values in a list to NAs with `purrr::modify_if()`. Example:

```{r modify_if_examples}
lst <- list(a = 1, b = 2, c = NULL, d = 4)
str(lst)

library(purrr)
lst_nonull <- modify_if(lst, is_null, ~NA)
str(lst_nonull)
```

\

```{r}
holister_tas_temp_int <- holister_tas_lst$STATION[[1]]$OBSERVATIONS$air_temp_set_1 |> 
  modify_if(is_null, ~NA) |> 
  unlist()

length(holister_tas_temp_int)
head(holister_tas_temp_int)
tail(holister_tas_temp_int)
```

\

Combine the dates and temperature values into a tibble:

```{r}
library(dplyr, warn.conflicts = FALSE)

holister_tas_hly_tbl <- tibble(
  stat_id = "HSEC1",
  dt = holister_tas_dt,
  tas = holister_tas_temp_int
)

glimpse(holister_tas_hly_tbl)
```

\

## Aggregate by day

As can be seen above, the daily we got is hourly. So we need to compute the minimum and maximum temperature by day.

```{r}
holister_tas_dly_tbl <- holister_tas_hly_tbl |> 
  group_by(date = date(dt)) |> 
  summarise(tasmin = min(tas), tasmax = max(tas), .groups = "drop") 

glimpse(holister_tas_dly_tbl)
```

\

## Plot the minimum and maximum daily temperature

```{r}
library(ggplot2)
ggplot(holister_tas_dly_tbl, mapping = aes(x = date)) +
  geom_line(mapping = aes(y = tasmin), col = "blue") +
  geom_line(mapping = aes(y = tasmax), col = "red") + 
  ylab("temp (F)") +
  xlab("") +
  labs(title = "Daily Minimum and Maximum Temperature for Hollister, CA", 
       subtitle = "Oct 2023 - May 2024")
```

\

# Part II (Bonus): Download and plot daily prepcipitation

To download the precipitation values, we can re-use most of the contents of our temperature request object, but change the `vars` parameter to `precip`, and add `precip = 1` to enable derived precipitation (see the Time Series endpoint docs for details).

## Create the request object

```{r}
holister_pr_req <- request(synoptic_ts_baseurl) |> 
  req_headers("Accept" = "application/json") |> 
  req_url_query(token = my_token,
                start = start_utc_chr,
                end = end_utc_chr,
                stid = station_id_chr,
                vars = "precip",
                precip = 1,                   ## recommended in  the API Docs
                units = "english",
                obtimezone = "local",
                .multi = "comma")

holister_pr_req
```

\

## Perform the request

```{r holister_pr_resp, cache=TRUE}
holister_pr_resp <- holister_pr_req |> req_perform()
holister_pr_resp
```

\

## Convert the body to a tibble

First we convert the body to a list:

```{r}
holister_pr_lst <- holister_pr_resp |> resp_body_json()
# holister_pr_lst |> View()
```

\

Pull out the dates:

```{r}
holister_pr_dt <- holister_pr_lst$STATION[[1]]$OBSERVATIONS$date_time |> 
  unlist() |> 
  ymd_hms(tz = "America/Los_Angeles")

length(holister_pr_dt)
```

\

Pull out the precip values:

```{r}
holister_pr_int_dbl <- holister_pr_lst$STATION[[1]]$OBSERVATIONS$precip_intervals_set_1d |> 
  modify_if(is_null, ~NA) |> 
  unlist()

length(holister_pr_int_dbl)
```

\

Combine the date and hourly precipitation vectors in a tibble:

```{r}
holister_pr_hly_tbl <- tibble(
  stat_id = "HSEC1",
  dt = holister_pr_dt,
  pr = holister_pr_int_dbl
)

glimpse(holister_pr_hly_tbl)
```

\

## Compute the daily totals and plot

First, we compute the daily totals:

```{r}
holister_pr_dly_tbl <- holister_pr_hly_tbl |> 
  group_by(date = date(dt)) |> 
  summarise(daily_precip = sum(pr), .groups = "drop")

head(holister_pr_dly_tbl)
```

\

Plot them as a column chart:

```{r}
ggplot(holister_pr_dly_tbl, mapping = aes(x = date, y = daily_precip)) +
  geom_col() + 
  ylab("precip (in)") +
  xlab("") +
  labs(title = "Daily Precipitation Totals for Hollister, CA", 
       subtitle = "Oct 2023 - May 2024")
```

\

## Plot the accumulated precipitation

```{r}
library(tidyr)

holister_pr_dly_tbl |> 
  replace_na(list(daily_precip = 0)) |> 
  mutate(acc_pr = cumsum(daily_precip)) |> 
  ggplot(holister_pr_dly_tbl, mapping = aes(x = date, y = acc_pr)) +
  geom_line() + 
  ylab("precip (in)") +
  xlab("") +
  labs(title = "Accumulated Precipitation for Hollister, CA", 
       subtitle = "Oct 2023 - May 2024")
```

\

## What was the total accumulation this water year?

```{r}
holister_pr_dly_tbl$daily_precip |> sum(na.rm = TRUE)
```
